<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.1.3">

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getActiveNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            NetworkInfo info = connectivity.getActiveNetworkInfo();"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\NetUtil.java"
            line="29"
            column="32"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getActiveNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        return cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\NetUtil.java"
            line="48"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            String endName = filePath.substring(filePath.lastIndexOf(&quot;.&quot;) + 1, filePath.length()).toLowerCase();//后缀名"
        errorLine2="                                                                                                  ~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\IntentActionUtil.java"
            line="52"
            column="99"/>
    </issue>

    <issue
        id="ExifInterface"
        severity="Warning"
        message="Avoid using `android.media.ExifInterface`; use `android.support.media.ExifInterface` from the support library instead"
        category="Correctness"
        priority="6"
        summary="Using `android.media.ExifInterface`"
        explanation="The `android.media.ExifInterface` implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable."
        errorLine1="import android.media.ExifInterface;"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\IntentActionUtil.java"
            line="14"
            column="8"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 15): `android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="            window.setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\base\BaseActivity.java"
            line="51"
            column="29"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, Toast.LENGTH_SHORT);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="41"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, resId, Toast.LENGTH_SHORT);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="58"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, Toast.LENGTH_LONG);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="75"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, resId, Toast.LENGTH_LONG);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="92"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="110"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, resId, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="128"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="147"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="171"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="194"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, message, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="225"
            column="26"/>
    </issue>

    <issue
        id="ShowToast"
        severity="Warning"
        message="Toast created but not shown: did you forget to call `show()` ?"
        category="Correctness"
        priority="6"
        summary="Toast created but not shown"
        explanation="`Toast.makeText()` creates a `Toast` but does **not** show it. You must call `show()` on the resulting object to actually make the `Toast` appear."
        errorLine1="                mToast = Toast.makeText(context, resId, duration);"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\ToastUtil.java"
            line="260"
            column="26"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_YEAR = new SimpleDateFormat(&quot;yyyy&quot;);"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="18"
            column="54"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_DAY = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="19"
            column="53"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_DAYS = new SimpleDateFormat(&quot;yyyyMMdd&quot;);"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="20"
            column="54"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_TIMES = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="21"
            column="55"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_TIME = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="22"
            column="54"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SDF_MONTH = new SimpleDateFormat(&quot;yyyy-MM&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="23"
            column="55"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private final static SimpleDateFormat SN_TIMES = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="24"
            column="54"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        DateFormat fmt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="120"
            column="26"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        DateFormat fmt = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="135"
            column="26"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        DateFormat fmt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="150"
            column="26"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="163"
            column="32"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="172"
            column="32"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="188"
            column="32"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat df = new SimpleDateFormat(FORMAT_FULL);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="207"
            column="31"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        DateFormat fmt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="213"
            column="26"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="235"
            column="45"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat sdfd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="266"
            column="33"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat sdf = new SimpleDateFormat(&quot;E&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="286"
            column="32"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="320"
            column="39"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="337"
            column="39"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="351"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="362"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="374"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy年&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="386"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;HH:mm&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="400"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="410"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="420"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年MM月dd日日报&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="429"
            column="30"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="431"
            column="30"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年MM月月报&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="437"
            column="30"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年MM月&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="439"
            column="30"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年年报&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="444"
            column="30"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    format = new SimpleDateFormat(&quot;yyyy年&quot;);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\DateUtil.java"
            line="446"
            column="30"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.code.gson:gson than 2.2.4 is available: 2.8.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.google.code.gson:gson:2.2.4&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\build.gradle"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.github.bumptech.glide:glide than 3.7.0 is available: 4.0.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.github.bumptech.glide:glide:3.7.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\build.gradle"
            line="54"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.squareup.okhttp3:okhttp than 3.2.0 is available: 3.8.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.squareup.okhttp3:okhttp:3.2.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\build.gradle"
            line="55"
            column="5"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:design:28.+)"
        category="Correctness"
        priority="4"
        summary="Gradle Dynamic Version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1="    implementation &apos;com.android.support:design:28.+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\build.gradle"
            line="51"
            column="5"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:appcompat-v7:28.+)"
        category="Correctness"
        priority="4"
        summary="Gradle Dynamic Version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1="    implementation &apos;com.android.support:appcompat-v7:28.+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\build.gradle"
            line="52"
            column="5"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="            final Rect rectSrc = new Rect(0, 0, b.getWidth(), b.getHeight());"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\widget\RoundiImageview.java"
            line="51"
            column="34"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="            final Rect rectDest = new Rect(0, 0, getWidth(), getHeight());"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\widget\RoundiImageview.java"
            line="52"
            column="35"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 15"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if(android.os.Build.VERSION.SDK_INT>10){"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\NetUtil.java"
            line="57"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `MyApplication` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    static MyApplication instance;"
        errorLine2="    ~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\base\MyApplication.java"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Context mContext;"
        errorLine2="            ~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\base\MyApplication.java"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `TimePickerView` which has field `btnSubmit` pointing to `Button`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static TimePickerView tpvCustomTime;"
        errorLine2="           ~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\PickViewUtil.java"
            line="21"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `OptionsPickerView` which has field `btnSubmit` pointing to `Button`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static OptionsPickerView tpvOptions = null;"
        errorLine2="            ~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\util\PickViewUtil.java"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.edit_delete_icon` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\res\drawable\edit_delete_icon.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.edit_delete_pressed_icon` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\res\drawable\edit_delete_pressed_icon.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.app_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;app_name&quot;>librarydemo&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\res\values\strings.xml"
            line="2"
            column="13"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/edit_delete_icon.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\res\drawable\edit_delete_icon.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/edit_delete_pressed_icon.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\res\drawable\edit_delete_pressed_icon.png"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `MySearchView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="D:\AndroidStudio\project\HappyWeekendProject\MyApplication2\librarydemo\src\main\java\com\example\jpm\librarydemo\tools\widget\MySearchView.java"
            line="101"
            column="20"/>
    </issue>

</issues>
